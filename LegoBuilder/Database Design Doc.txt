COLOUR - PRIMARY
EXTERNALIDS - N/A
EXTERNALIDSLEGO - N/A
INSTRUCTION - TERTIARY
INSTRUCTIONS - N/A
LEGO - N/A
PART - SECONDARY
PARTCATID - PRIMARY
RESULTSCOLOUR - N/A
RESULTSSETPART - N/A
SET - SECONDARY
SETPARTS - TERTIARY
THEME - PRIMARY

USER - PRIMARY
USER-SET - TERTIARY

User connects to user-set
user-set is a join table to set
user-set has total of each set - individual totals by user, doesn't impact sets or set parts
Then can extract total number of pieces and colours by join queries from user, through set, through to set parts


* PRIMARY Colour table
	Make a Lego_Id and Lego_Descrs column using ExtIds and ExtDescrs columns -> Lego 
	Singular row for all lego_id and lego_descrs
	Needs
		separate colour id primary key
		Id INT32 NN unique key
		Name VARCHAR20 NN
		RBG CHAR6 NN
		IS_TRANS BIT NN
		Lego_Id INT32 N
		Lego_Descrs VARCHAR 200 N
* PRIMARY PartCatId
	No changes from model
		separate partcatid primary key
		id int32 NN unique key
		name varchar200 NN
		part_count INT32 NN
* PRIMARY theme
	as is in the model
		separate theme primary key
		id int32 NN unique key
		parent_id int32 N
		name varchar50 NN

* PRIMARY user
		userid primary key
		username VARCHAR20 unique key
		password VARCHAR200
		salt VARCHAR200
		first VARCHAR50
		last VARCHAR50

* SECONDARY Part table
	Part_Cat_Id is foreign key to partcartid table
	Make an Lego_Id column using ExternalIIIIIDDDDDSSSSLego
	Singular row for all Lego IDs
	otherwise as is for the model
		separate partid primary key
		partnum varchar20 NN unique key
		name varchar200 NN
		partcatid int32 NN foreign key
		yearfrom int32 N
		yearto int32 N
		part_url varchar200 N
		part_img_url varchar200 N
* SECONDARY set
	theme_id is foreign key to theme table
	otherwise as is for the model
		separate set primary key
		set_num varchar 20 unique key
		year INT 32 NN
		themeid int32 NN foreign key
		numparts int32 NN 
		set_img_url varchar200 NN
		set_url varchar200
		lastmodifieddatetime datetime
		
* TERTIARY Instruction table
	Uses InstructionSSSSSSS
	Make a URL and Description column using Instruction class
	I guess I have to pull these manually
	as is in the model
		separate instruction primary key
		set_id varchar20 NN passed in to the sql query in the dao 
			NOT unique key
			FOREIGN Key to sets
		url varchar200 N
		description varchar200 N

 
* TERTIARY setpart
	based on resultsetpart
	THIS WILL BE A JOIN TABLE
	the supplied id will be unique
	so don't need to worry about combinations, its got it for you
	part will be a foreign key to the part table
	get it from part
	colour will be a foreign key to the colour table
	get it from colour
	set will be a foreign key to the set table
	get that info from set
	Join table needs:
		separate setpart primary key
		set number varchar20 NN foreign key - it's already in the json 
		id INT32 NN
		inv_part_id INT32 N
		part_id INT32 NN foreign key
		colour_id INT32 NN foreign key
		quantity INT32 NN
		isspare BIT NN
		element_id varchar20 N
		num_sets int32 NN

* TERTIARY userset
	THIS WILL BE A JOIN TABLE
	combines users and the sets they have
		separate userset primary key
		userid INT32 foreign key
		set_num VARCHAr20 foreign key
		quanity int32 NN

Final:
Database Build Order:
	Primary:
		colours
		part_categories
		themes
		users
	Secondary:
		parts
		sets
	Tertiary:
		instructions - this isn't a call to the Brickset API anymore
		sets_parts - resultssetsparts is this table's model
		users_sets
	Add from the top down
	Delete from the bottom up
